# https://www.runway.team/blog/how-to-build-the-perfect-fastlane-pipeline-for-android

default_platform(:android)

fastlane_require "dotenv"
Dotenv.load ".env.secret"

platform :android do

  # Patched this because of bug https://github.com/fastlane/fastlane/issues/21500
  lane :patched_google_play_track_version_codes do |options|
    track_version_codes = [13]
    begin
      track_version_codes = google_play_track_version_codes(
        package_name: options[:package_name],
        track: options[:track],
        json_key: options[:json_key],
      )
      puts "Found version code #{track_version_codes}"
    rescue StandardError => e
      puts "Ignoring expected error: #{e.message} while fetching the latest internal build number"
      puts "Returning default version codes #{track_version_codes}"
    end
    track_version_codes
  end

  desc "Fetches the latest version code from the Play Console and increments it by 1"
  lane :fetch_and_increment_build_number do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    # Call the patched version
    version_codes = patched_google_play_track_version_codes(
      package_name: app_identifier,
      track: "internal",
      json_key: ENV["ANDROID_JSON_KEY_FILE"]
    )

    # version_codes = google_play_track_version_codes(
    #   package_name: app_identifier,
    #   track: "internal",
    #   json_key: ENV["ANDROID_JSON_KEY_FILE"]
    # )
    
    updated_version_code = version_codes[0] + 1
    
    increment_version_code(
      version_code: updated_version_code
    )
  end  

  desc "Build"
  lane :build do
    gradle(
      task: "bundle", # or "assemble", if you want to build an APK
      build_type: "release",
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }  
    )    
  end
  
  lane :screenshots do
    capture_android_screenshots
    upload_to_play_store
  end  

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build debug, test APK for screenshots and grab screenshots"
  lane :grab_screens do
    gradle(
      task: 'clean'
    )
    gradle(
      task: 'assemble',
      build_type: 'Debug'
    )
    gradle(
      task: 'assemble',
      build_type: 'AndroidTest'
    )
    screengrab
  end

  lane :upload_internal_track do
    upload_to_play_store(
      track: "internal",
      skip_upload_apk: true,
      json_key: ENV["ANDROID_JSON_KEY_FILE"]
    )
  end

  private_lane :build_upload_playstore do
    fetch_and_increment_build_number
    build
    upload_internal_track
  end

  desc "Connect to DEV server, build and upload to Play Store"
  lane :build_dev_upload_playstore do
    ENV['API_URL'] = 'https://dev.onelocal.one/api'
    build_upload_playstore
  end

  desc "Connect to BETA server, Build and upload to Play Store"
  lane :build_beta_upload_playstore do
    ENV['API_URL'] = 'https://beta.onelocal.one/api'
    build_upload_playstore
  end  
end
